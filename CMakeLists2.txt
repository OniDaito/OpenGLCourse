
cmake_minimum_required (VERSION 2.8) 
project (S9Gear) 

################################
# Set source files

FILE(GLOB CommonSources src/*)

# For now, include OpenGL here
FILE(GLOB GLSources src/gl/*)

include_directories(include)

################################################################
# Detect Current OS

if (WIN32)
    set(_GEAR_WIN32_WGL 1)
    message(STATUS "Building Gear for WGL on a Win32 system") 
    add_definitions(-D_GEAR_WIN32_WGL)
elseif (UNIX AND APPLE)
    set(_GEAR_COCOA_NSGL 1)
    add_definitions(-D_GEAR_COCOA_NSGL)
    message(STATUS "Building Gear for Cocoa and NSOpenGL on Mac OS X")
elseif (UNIX AND NOT APPLE)
    set(_GEAR_X11_GLX 1)
    add_definitions(-D_GEAR_X11_GLX)
    message(STATUS "Building Gear for X11 and GLX on a Unix-like system")
	FILE(GLOB OSSources src/linux/*)
else()
    message(FATAL_ERROR "No supported platform was detected")
endif()

option(USEPCL "usepcl" OFF)

################################################################
# Linux 

if (UNIX AND NOT APPLE)

  if (CMAKE_COMPILER_IS_GNUCC)
    add_definitions(-Wall)
  endif()

	find_package(PkgConfig REQUIRED)
	pkg_check_modules(GLIB_PKG glib-2.0)

	if (GLIB_PKG_FOUND)
		message(Found glib-2.0)
		include_directories(${GLIB_PKG_INCLUDE_DIRS})
	endif(GLIB_PKG_FOUND)


  # Macro to find packages

  macro(gear_find_pkgconfig_lib pkgname)
    include(FindPkgConfig)
    pkg_check_modules(${pkgname}_pkg REQUIRED ${pkgname})
    if ( DEFINED ${pkgname}_pkg_FOUND )
      set (GEAR_LIBRARIES ${GEAR_LIBRARIES} ${${pkgname}_pkg_LIBRARIES}
                                    ${${pkgname}_pkg_LDFLAGS} ${${pkgname}_pkg_LDFLAGS_OTHER})
      set (GEAR_INCLUDES ${GEAR_INCLUDES} ${${pkgname}_pkg_INCLUDE_DIRS})
      set (GEAR_CXX_FLAGS ${GEAR_CXX_FLAGS} ${${pkgname}_pkg_CFLAGS})
    else()
      message( FATAL_ERROR "Cannot find pkgconfig file for ${pkgconfig}. Check your PKG_CONFIG_PATH environment variable.")
    endif()
  endmacro(gear_find_pkgconfig_lib)


  # Find GLEW
  pkg_check_modules(GLEW_PKG glew)

  if (GLEW_PKG)
      message(Found glib-2.0)
    include_directories(${GLEW_PKG_INCLUDE_DIRS})
	
	  set (GLEW_LIBRARIES ${${pkgname}_pkg_LIBRARIES}
                    ${${pkgname}_pkg_LDFLAGS} ${${pkgname}_pkg_LDFLAGS_OTHER})
	
	
  endif(GLEW_PKG)

  # PCL
  if (USEPCL)
    add_definitions(-D_GEAR_PCL)
    find_package(PCL 1.2 REQUIRED)
    include_directories(${PCL_INCLUDE_DIRS})
    link_directories(${PCL_LIBRARY_DIRS})
    add_definitions(${PCL_DEFINITIONS})
  endif(USEPCL)


  # OpenGL
  gear_find_pkgconfig_lib(gl)
  gear_find_pkgconfig_lib(glew)

  find_package(OpenGL)
  find_package(GLUT)
  if(NOT OPENGL_FOUND)
    message("ERROR: OpenGL not found")
  endif(NOT OPENGL_FOUND)

  # Find GTK for File Dialogs
  gear_find_pkgconfig_lib(gtkmm-3.0)


  # Custom OpenCV paths
  set(INCLUDES_SEARCH_PATHS
    /usr/local/include/opencv2
    /usr/local/include
    CACHE STRING "Custom Includes Search Paths")

  # Set Architecture under Linux
  execute_process(COMMAND uname -m OUTPUT_VARIABLE ARCH)
  if ( ${ARCH} MATCHES "x86_64" )
    set (SUBLIBDIRSUFFIX "linux64")
  else()
    set(SUBLIBDIRSUFFIX "linux")
  endif()

  # Extra Library Search Paths
  set(LIBRARIES_SEARCH_PATHS 
    /usr/local/lib/
    /usr/local/lib64/
    ${CMAKE_SOURCE_DIR}/lib/
    CACHE STRING "Library search paths")

  message(STATUS "Looking for libraries in : ${LIBRARIES_SEARCH_PATHS}")
  message(STATUS "Looking for includes in  : ${INCLUDES_SEARCH_PATHS}")

  set (CMAKE_FIND_LIBRARY_PREFIXES "lib" "")
  set (CMAKE_FIND_LIBRARY_SUFFIXES ".so" ".a")

  # OpenCV Related
  option(USEOPENCV "useopencv" OFF)

  if (USEOPENCV)
    add_definitions(-D_GEAR_OPENCV)
    gear_find_library(opencv_calib3d)
    gear_find_library(opencv_contrib)
    gear_find_library(opencv_core)
    gear_find_library(opencv_features2d)
    gear_find_library(opencv_gpu)
    gear_find_library(opencv_highgui)
    gear_find_library(opencv_imgproc)
    gear_find_library(opencv_legacy)
    gear_find_library(opencv_ml)
    gear_find_library(opencv_objdetect)
    gear_find_library(opencv_stitching)
    gear_find_library(opencv_ts)
    gear_find_library(opencv_video)
  endif(USEOPENCV)

  # Find Boost
  find_package(Boost COMPONENTS system filesystem signals iostreams program_options thread REQUIRED)
  include_directories(${BOOST_INCLUDE_DIR})

  # Find installed versions of AntTweakbar, assimp and glfw if installed
  gear_find_library(glut)
  gear_find_library(assimp)
  gear_find_library(glfw)
  gear_find_library(AntTweakBar)

  gear_find_library(Xrandr)
  gear_find_library(rt)
  gear_find_library(X11)
  gear_find_library(Xext)
  gear_find_library(Xxf86vm)

endif()


################################################################
# OSX 

if ( APPLE )

  # Set the compiler
  set(CMAKE_CPP_COMPILER_INIT g++)


  #SET(GUI_TYPE MACOSX_BUNDLE) 
  INCLUDE_DIRECTORIES ( /Developer/Headers/FlatCarbon )
  FIND_LIBRARY(CARBON_LIBRARY Carbon)
  FIND_LIBRARY(QUICKTIME_LIBRARY QuickTime )
  FIND_LIBRARY(APP_SERVICES_LIBRARY ApplicationServices )
  MARK_AS_ADVANCED (CARBON_LIBRARY
                     QUICKTIME_LIBRARY
                     APP_SERVICES_LIBRARY)

  SET(EXTRA_LIBS ${CARBON_LIBRARY} ${QUICKTIME_LIBRARY} ${APP_SERVICES_LIBRARY})



  set (CMAKE_FIND_LIBRARY_PREFIXES "" "lib")
  set (CMAKE_FIND_LIBRARY_SUFFIXES ".dylib" ".a" ".lib", ".so")
  #set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-m32")
  set (CMAKE_OSX_ARCHITECTURES "i386")
   
endif ()


################################
# DEBUG mode

add_definitions(-DDEBUG)
SET(CMAKE_BUILD_TYPE debug)
SET(CMAKE_CXX_FLAGS_DEBUG "-g")


#SET(CMAKE_CXX_FLAGS_DEBUG "-std=c++0x")

################################
# Setup the exectutable

link_directories(${EXTRA_LIBS})
link_directories(${PROJECT_SOURCE_DIR}/lib)
link_directories(${CMAKE_CURRENT_BINARY_DIR}/lib)


################################################################
# Macro to find libraries and link them via name

macro(gear_find_library libname)
  string(TOLOWER ${libname} libnamelow)
     
  find_library(${libname}_LIB NAMES ${libname} PATHS ${LIBRARIES_SEARCH_PATHS})
  if (NOT ${libname}_LIB)
    find_library(${libname}_LIB NAMES ${libnamelow} PATHS ${LIBRARIES_SEARCH_PATHS})
  endif()
  
  if (NOT ${libname}_LIB)
    message(FATAL_ERROR "Cannot find '${libname}' library")
  else()
    message(STATUS "Found '${libname}' library in ${${libname}_LIB}")
    set(GEAR_LIBRARIES ${GEAR_LIBRARIES} ${${libname}_LIB})
  endif()
endmacro()


################################################################
# Final Steps to build 

set (CMAKE_LIBRARY_PATH ${LIBRARIES_SEARCH_PATHS} /usr/lib /usr/local/lib )
set (CMAKE_INCLUDE_PATH ${INCLUDES_SEARCH_PATHS} /usr/include /usr/local/include )

add_library(s9gear SHARED
	${CommonSources}
	${GLSources}
	${OSSources}
) 

include_directories(${GEAR_INCLUDES}
	${INCLUDES_SEARCH_PATHS}
	${INCLUDES}
)

target_link_libraries(s9gear 
	${GEAR_LIBRARIES}
	${OPENGL_LIBRARY}
	${PCL_LIBRARIES}
	${Boost_FILESYSTEM_LIBRARY}
	${Boost_SYSTEM_LIBRARY}
	${Boost_THREAD_LIBRARY}
	${Boost_IOSTREAMS_LIBRARY}
	${Boost_SIGNALS_LIBRARY}
	${Boost_PROGRAM_OPTIONS_LIBRARY}
)

get_filename_component(PROJECT_ROOT ${CMAKE_CURRENT_LIST_FILE} PATH)                                                                                            
get_filename_component(PROJECT_NAME ${PROJECT_ROOT} NAME)

project(${PROJECT_NAME})


################################################################
# Extra Projects to compile in

if (NOT TARGET examples)
	add_subdirectory("${CMAKE_SOURCE_DIR}/examples/basic")
	add_subdirectory("${CMAKE_SOURCE_DIR}/examples/model")
	add_subdirectory("${CMAKE_SOURCE_DIR}/examples/fbo")
	add_subdirectory("${CMAKE_SOURCE_DIR}/examples/video")
endif() 

# Build the Leeds Application if we are under Linux
if (NOT TARGET applications AND _GEAR_X11_GLX)
	add_subdirectory("${CMAKE_SOURCE_DIR}/applications/leeds")
endif() 


